#include <iostream>
using namespace std;
#include <vector>
#include <map>
/*
	* 公司今天招聘了10个员工（ABCDEFGHIJ），10名员工进入公司之后，需要指派员工在那个部门工作
	* 员工信息有: 姓名  工资组成；部门分为：策划、美术、研发
	* 随机给10名员工分配部门和工资
	* 通过multimap进行信息的插入  key(部门编号) value(员工)
	* 分部门显示员工信息
*/
#define CeHua  0
#define MeiShu 1
#define YanFa  2
//测试函数
//void printWprker(vector<Worker>& v) {
//	for (vector<Worker>::iterator it = v.begin(); it != v.end(); it++) {
//		cout << "姓名：" << it->m_Name << "  薪资：" << it->m_Salary << endl;
//	}
//}
class Worker {
public:
	string m_Name;
	int m_Salary;
};
void creatWorker(vector<Worker>&v) {
	srand((unsigned)time(NULL));
	string nameSeed = "ABCDEFGHIJ";
	for (int i = 0; i < 10; i++)
	{
		Worker worker;
		worker.m_Name = "员工";
		worker.m_Name += nameSeed[i];

		worker.m_Salary = rand() % 10000 + 10000;
		v.push_back(worker);
	}
}
void setGroup(vector<Worker>&v, multimap<int, Worker>&m) {
	for (vector<Worker>::iterator it = v.begin(); it != v.end(); it++) {
		//产生随机的部门编号
		int dptId = rand() % 3;
		//将员工插入到分组中(key：部门编号；value：具体员工)
		m.insert(make_pair(dptId, (*it)));
	}
}
void showWorkerByGroup(multimap<int, Worker>&m) {
	cout << "策划部门：" << endl;
	multimap<int, Worker>::iterator pos =  m.find(CeHua);
	int count = m.count(CeHua);			//统计策划部门人数
	int index = 0;
	for (; pos != m.end() && index < count; pos++, index++) {
		cout << "姓名：" << pos->second.m_Name << "  薪资：" << pos->second.m_Salary << endl;
	}

	cout << "美术部门：" << endl;
	pos = m.find(MeiShu);
	count = m.count(MeiShu);			//统计策划部门人数
	index = 0;
	for (; pos != m.end() && index < count; pos++, index++) {
		cout << "姓名：" << pos->second.m_Name << "  薪资：" << pos->second.m_Salary << endl;
	}

	cout << "研发部门：" << endl;
	pos = m.find(YanFa);
	count = m.count(YanFa);			//统计策划部门人数
	index = 0;
	for (; pos != m.end() && index < count; pos++, index++) {
		cout << "姓名：" << pos->second.m_Name << "  薪资：" << pos->second.m_Salary << endl;
	}
}
int main() {
	//1、创建员工
	vector<Worker>vWorker;
	creatWorker(vWorker);
	////测试
	//printWprker(vWorker);
	//2、员工分组
	multimap<int, Worker>mWorker;
	setGroup(vWorker, mWorker);
	//分组显示员工
	showWorkerByGroup(mWorker);
	system("pause");
	return 0;
}